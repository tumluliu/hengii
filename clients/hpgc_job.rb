#
# Autogenerated by Thrift Compiler (0.7.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'hpgcjob_types'

module HpgcJob
  class Client
    include ::Thrift::Client

    def start(job)
      send_start(job)
      return recv_start()
    end

    def send_start(job)
      send_message('start', Start_args, :job => job)
    end

    def recv_start()
      result = receive_message(Start_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'start failed: unknown result')
    end

    def start_flow(flow)
      send_start_flow(flow)
      return recv_start_flow()
    end

    def send_start_flow(flow)
      send_message('start_flow', Start_flow_args, :flow => flow)
    end

    def recv_start_flow()
      result = receive_message(Start_flow_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'start_flow failed: unknown result')
    end

    def pause(job, client_id)
      send_pause(job, client_id)
      recv_pause()
    end

    def send_pause(job, client_id)
      send_message('pause', Pause_args, :job => job, :client_id => client_id)
    end

    def recv_pause()
      result = receive_message(Pause_result)
      return
    end

    def pause_flow(flow, client_id)
      send_pause_flow(flow, client_id)
      recv_pause_flow()
    end

    def send_pause_flow(flow, client_id)
      send_message('pause_flow', Pause_flow_args, :flow => flow, :client_id => client_id)
    end

    def recv_pause_flow()
      result = receive_message(Pause_flow_result)
      return
    end

    def resume(job, client_id)
      send_resume(job, client_id)
      recv_resume()
    end

    def send_resume(job, client_id)
      send_message('resume', Resume_args, :job => job, :client_id => client_id)
    end

    def recv_resume()
      result = receive_message(Resume_result)
      return
    end

    def resume_flow(flow, client_id)
      send_resume_flow(flow, client_id)
      recv_resume_flow()
    end

    def send_resume_flow(flow, client_id)
      send_message('resume_flow', Resume_flow_args, :flow => flow, :client_id => client_id)
    end

    def recv_resume_flow()
      result = receive_message(Resume_flow_result)
      return
    end

    def cancel(job, client_id)
      send_cancel(job, client_id)
      recv_cancel()
    end

    def send_cancel(job, client_id)
      send_message('cancel', Cancel_args, :job => job, :client_id => client_id)
    end

    def recv_cancel()
      result = receive_message(Cancel_result)
      return
    end

    def cancel_flow(flow, client_id)
      send_cancel_flow(flow, client_id)
      recv_cancel_flow()
    end

    def send_cancel_flow(flow, client_id)
      send_message('cancel_flow', Cancel_flow_args, :flow => flow, :client_id => client_id)
    end

    def recv_cancel_flow()
      result = receive_message(Cancel_flow_result)
      return
    end

    def get_job_status(job, client_id)
      send_get_job_status(job, client_id)
      return recv_get_job_status()
    end

    def send_get_job_status(job, client_id)
      send_message('get_job_status', Get_job_status_args, :job => job, :client_id => client_id)
    end

    def recv_get_job_status()
      result = receive_message(Get_job_status_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_job_status failed: unknown result')
    end

    def get_flow_status(flow, client_id)
      send_get_flow_status(flow, client_id)
      return recv_get_flow_status()
    end

    def send_get_flow_status(flow, client_id)
      send_message('get_flow_status', Get_flow_status_args, :flow => flow, :client_id => client_id)
    end

    def recv_get_flow_status()
      result = receive_message(Get_flow_status_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_flow_status failed: unknown result')
    end

    def get_job_progress(job, client_id)
      send_get_job_progress(job, client_id)
      return recv_get_job_progress()
    end

    def send_get_job_progress(job, client_id)
      send_message('get_job_progress', Get_job_progress_args, :job => job, :client_id => client_id)
    end

    def recv_get_job_progress()
      result = receive_message(Get_job_progress_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_job_progress failed: unknown result')
    end

    def get_flow_progress(flow, client_id)
      send_get_flow_progress(flow, client_id)
      return recv_get_flow_progress()
    end

    def send_get_flow_progress(flow, client_id)
      send_message('get_flow_progress', Get_flow_progress_args, :flow => flow, :client_id => client_id)
    end

    def recv_get_flow_progress()
      result = receive_message(Get_flow_progress_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_flow_progress failed: unknown result')
    end

  end

  class Processor
    include ::Thrift::Processor

    def process_start(seqid, iprot, oprot)
      args = read_args(iprot, Start_args)
      result = Start_result.new()
      begin
        result.success = @handler.start(args.job)
      rescue HpgcJobException => e
        result.e = e
      end
      write_result(result, oprot, 'start', seqid)
    end

    def process_start_flow(seqid, iprot, oprot)
      args = read_args(iprot, Start_flow_args)
      result = Start_flow_result.new()
      begin
        result.success = @handler.start_flow(args.flow)
      rescue HpgcJobException => e
        result.e = e
      end
      write_result(result, oprot, 'start_flow', seqid)
    end

    def process_pause(seqid, iprot, oprot)
      args = read_args(iprot, Pause_args)
      result = Pause_result.new()
      @handler.pause(args.job, args.client_id)
      write_result(result, oprot, 'pause', seqid)
    end

    def process_pause_flow(seqid, iprot, oprot)
      args = read_args(iprot, Pause_flow_args)
      result = Pause_flow_result.new()
      @handler.pause_flow(args.flow, args.client_id)
      write_result(result, oprot, 'pause_flow', seqid)
    end

    def process_resume(seqid, iprot, oprot)
      args = read_args(iprot, Resume_args)
      result = Resume_result.new()
      @handler.resume(args.job, args.client_id)
      write_result(result, oprot, 'resume', seqid)
    end

    def process_resume_flow(seqid, iprot, oprot)
      args = read_args(iprot, Resume_flow_args)
      result = Resume_flow_result.new()
      @handler.resume_flow(args.flow, args.client_id)
      write_result(result, oprot, 'resume_flow', seqid)
    end

    def process_cancel(seqid, iprot, oprot)
      args = read_args(iprot, Cancel_args)
      result = Cancel_result.new()
      @handler.cancel(args.job, args.client_id)
      write_result(result, oprot, 'cancel', seqid)
    end

    def process_cancel_flow(seqid, iprot, oprot)
      args = read_args(iprot, Cancel_flow_args)
      result = Cancel_flow_result.new()
      @handler.cancel_flow(args.flow, args.client_id)
      write_result(result, oprot, 'cancel_flow', seqid)
    end

    def process_get_job_status(seqid, iprot, oprot)
      args = read_args(iprot, Get_job_status_args)
      result = Get_job_status_result.new()
      result.success = @handler.get_job_status(args.job, args.client_id)
      write_result(result, oprot, 'get_job_status', seqid)
    end

    def process_get_flow_status(seqid, iprot, oprot)
      args = read_args(iprot, Get_flow_status_args)
      result = Get_flow_status_result.new()
      result.success = @handler.get_flow_status(args.flow, args.client_id)
      write_result(result, oprot, 'get_flow_status', seqid)
    end

    def process_get_job_progress(seqid, iprot, oprot)
      args = read_args(iprot, Get_job_progress_args)
      result = Get_job_progress_result.new()
      result.success = @handler.get_job_progress(args.job, args.client_id)
      write_result(result, oprot, 'get_job_progress', seqid)
    end

    def process_get_flow_progress(seqid, iprot, oprot)
      args = read_args(iprot, Get_flow_progress_args)
      result = Get_flow_progress_result.new()
      result.success = @handler.get_flow_progress(args.flow, args.client_id)
      write_result(result, oprot, 'get_flow_progress', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class Start_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    JOB = 1

    FIELDS = {
      JOB => {:type => ::Thrift::Types::STRUCT, :name => 'job', :class => Job}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Start_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => HpgcJobException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Start_flow_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    FLOW = 1

    FIELDS = {
      FLOW => {:type => ::Thrift::Types::STRUCT, :name => 'flow', :class => JobFlow}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Start_flow_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => HpgcJobException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Pause_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    JOB = 1
    CLIENT_ID = 2

    FIELDS = {
      JOB => {:type => ::Thrift::Types::STRUCT, :name => 'job', :class => Job},
      CLIENT_ID => {:type => ::Thrift::Types::I32, :name => 'client_id'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Pause_result
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Pause_flow_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    FLOW = 1
    CLIENT_ID = 2

    FIELDS = {
      FLOW => {:type => ::Thrift::Types::STRUCT, :name => 'flow', :class => JobFlow},
      CLIENT_ID => {:type => ::Thrift::Types::I32, :name => 'client_id'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Pause_flow_result
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Resume_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    JOB = 1
    CLIENT_ID = 2

    FIELDS = {
      JOB => {:type => ::Thrift::Types::STRUCT, :name => 'job', :class => Job},
      CLIENT_ID => {:type => ::Thrift::Types::I32, :name => 'client_id'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Resume_result
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Resume_flow_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    FLOW = 1
    CLIENT_ID = 2

    FIELDS = {
      FLOW => {:type => ::Thrift::Types::STRUCT, :name => 'flow', :class => JobFlow},
      CLIENT_ID => {:type => ::Thrift::Types::I32, :name => 'client_id'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Resume_flow_result
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Cancel_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    JOB = 1
    CLIENT_ID = 2

    FIELDS = {
      JOB => {:type => ::Thrift::Types::STRUCT, :name => 'job', :class => Job},
      CLIENT_ID => {:type => ::Thrift::Types::I32, :name => 'client_id'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Cancel_result
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Cancel_flow_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    FLOW = 1
    CLIENT_ID = 2

    FIELDS = {
      FLOW => {:type => ::Thrift::Types::STRUCT, :name => 'flow', :class => JobFlow},
      CLIENT_ID => {:type => ::Thrift::Types::I32, :name => 'client_id'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Cancel_flow_result
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_job_status_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    JOB = 1
    CLIENT_ID = 2

    FIELDS = {
      JOB => {:type => ::Thrift::Types::STRUCT, :name => 'job', :class => Job},
      CLIENT_ID => {:type => ::Thrift::Types::I32, :name => 'client_id'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_job_status_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => Result}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_flow_status_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    FLOW = 1
    CLIENT_ID = 2

    FIELDS = {
      FLOW => {:type => ::Thrift::Types::STRUCT, :name => 'flow', :class => JobFlow},
      CLIENT_ID => {:type => ::Thrift::Types::I32, :name => 'client_id'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_flow_status_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => Result}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_job_progress_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    JOB = 1
    CLIENT_ID = 2

    FIELDS = {
      JOB => {:type => ::Thrift::Types::STRUCT, :name => 'job', :class => Job},
      CLIENT_ID => {:type => ::Thrift::Types::I32, :name => 'client_id'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_job_progress_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::DOUBLE, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_flow_progress_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    FLOW = 1
    CLIENT_ID = 2

    FIELDS = {
      FLOW => {:type => ::Thrift::Types::STRUCT, :name => 'flow', :class => JobFlow},
      CLIENT_ID => {:type => ::Thrift::Types::I32, :name => 'client_id'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_flow_progress_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::DOUBLE, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end

