/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package HPGC.HiGIS.Server;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Result implements org.apache.thrift.TBase<Result, Result._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Result");

  private static final org.apache.thrift.protocol.TField FLOW_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("flow_status", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PROGRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("progress", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField JOB_RESULT_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("job_result_list", org.apache.thrift.protocol.TType.LIST, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ResultStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ResultTupleSchemeFactory());
  }

  /**
   * 
   * @see Status
   */
  public Status flow_status; // required
  public String message; // required
  public double progress; // required
  public List<JobResult> job_result_list; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see Status
     */
    FLOW_STATUS((short)1, "flow_status"),
    MESSAGE((short)2, "message"),
    PROGRESS((short)3, "progress"),
    JOB_RESULT_LIST((short)4, "job_result_list");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FLOW_STATUS
          return FLOW_STATUS;
        case 2: // MESSAGE
          return MESSAGE;
        case 3: // PROGRESS
          return PROGRESS;
        case 4: // JOB_RESULT_LIST
          return JOB_RESULT_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PROGRESS_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FLOW_STATUS, new org.apache.thrift.meta_data.FieldMetaData("flow_status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Status.class)));
    tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROGRESS, new org.apache.thrift.meta_data.FieldMetaData("progress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.JOB_RESULT_LIST, new org.apache.thrift.meta_data.FieldMetaData("job_result_list", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JobResult.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Result.class, metaDataMap);
  }

  public Result() {
  }

  public Result(
    Status flow_status,
    String message,
    double progress,
    List<JobResult> job_result_list)
  {
    this();
    this.flow_status = flow_status;
    this.message = message;
    this.progress = progress;
    setProgressIsSet(true);
    this.job_result_list = job_result_list;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Result(Result other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetFlow_status()) {
      this.flow_status = other.flow_status;
    }
    if (other.isSetMessage()) {
      this.message = other.message;
    }
    this.progress = other.progress;
    if (other.isSetJob_result_list()) {
      List<JobResult> __this__job_result_list = new ArrayList<JobResult>();
      for (JobResult other_element : other.job_result_list) {
        __this__job_result_list.add(new JobResult(other_element));
      }
      this.job_result_list = __this__job_result_list;
    }
  }

  public Result deepCopy() {
    return new Result(this);
  }

  @Override
  public void clear() {
    this.flow_status = null;
    this.message = null;
    setProgressIsSet(false);
    this.progress = 0.0;
    this.job_result_list = null;
  }

  /**
   * 
   * @see Status
   */
  public Status getFlow_status() {
    return this.flow_status;
  }

  /**
   * 
   * @see Status
   */
  public Result setFlow_status(Status flow_status) {
    this.flow_status = flow_status;
    return this;
  }

  public void unsetFlow_status() {
    this.flow_status = null;
  }

  /** Returns true if field flow_status is set (has been assigned a value) and false otherwise */
  public boolean isSetFlow_status() {
    return this.flow_status != null;
  }

  public void setFlow_statusIsSet(boolean value) {
    if (!value) {
      this.flow_status = null;
    }
  }

  public String getMessage() {
    return this.message;
  }

  public Result setMessage(String message) {
    this.message = message;
    return this;
  }

  public void unsetMessage() {
    this.message = null;
  }

  /** Returns true if field message is set (has been assigned a value) and false otherwise */
  public boolean isSetMessage() {
    return this.message != null;
  }

  public void setMessageIsSet(boolean value) {
    if (!value) {
      this.message = null;
    }
  }

  public double getProgress() {
    return this.progress;
  }

  public Result setProgress(double progress) {
    this.progress = progress;
    setProgressIsSet(true);
    return this;
  }

  public void unsetProgress() {
    __isset_bit_vector.clear(__PROGRESS_ISSET_ID);
  }

  /** Returns true if field progress is set (has been assigned a value) and false otherwise */
  public boolean isSetProgress() {
    return __isset_bit_vector.get(__PROGRESS_ISSET_ID);
  }

  public void setProgressIsSet(boolean value) {
    __isset_bit_vector.set(__PROGRESS_ISSET_ID, value);
  }

  public int getJob_result_listSize() {
    return (this.job_result_list == null) ? 0 : this.job_result_list.size();
  }

  public java.util.Iterator<JobResult> getJob_result_listIterator() {
    return (this.job_result_list == null) ? null : this.job_result_list.iterator();
  }

  public void addToJob_result_list(JobResult elem) {
    if (this.job_result_list == null) {
      this.job_result_list = new ArrayList<JobResult>();
    }
    this.job_result_list.add(elem);
  }

  public List<JobResult> getJob_result_list() {
    return this.job_result_list;
  }

  public Result setJob_result_list(List<JobResult> job_result_list) {
    this.job_result_list = job_result_list;
    return this;
  }

  public void unsetJob_result_list() {
    this.job_result_list = null;
  }

  /** Returns true if field job_result_list is set (has been assigned a value) and false otherwise */
  public boolean isSetJob_result_list() {
    return this.job_result_list != null;
  }

  public void setJob_result_listIsSet(boolean value) {
    if (!value) {
      this.job_result_list = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FLOW_STATUS:
      if (value == null) {
        unsetFlow_status();
      } else {
        setFlow_status((Status)value);
      }
      break;

    case MESSAGE:
      if (value == null) {
        unsetMessage();
      } else {
        setMessage((String)value);
      }
      break;

    case PROGRESS:
      if (value == null) {
        unsetProgress();
      } else {
        setProgress((Double)value);
      }
      break;

    case JOB_RESULT_LIST:
      if (value == null) {
        unsetJob_result_list();
      } else {
        setJob_result_list((List<JobResult>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FLOW_STATUS:
      return getFlow_status();

    case MESSAGE:
      return getMessage();

    case PROGRESS:
      return Double.valueOf(getProgress());

    case JOB_RESULT_LIST:
      return getJob_result_list();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FLOW_STATUS:
      return isSetFlow_status();
    case MESSAGE:
      return isSetMessage();
    case PROGRESS:
      return isSetProgress();
    case JOB_RESULT_LIST:
      return isSetJob_result_list();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Result)
      return this.equals((Result)that);
    return false;
  }

  public boolean equals(Result that) {
    if (that == null)
      return false;

    boolean this_present_flow_status = true && this.isSetFlow_status();
    boolean that_present_flow_status = true && that.isSetFlow_status();
    if (this_present_flow_status || that_present_flow_status) {
      if (!(this_present_flow_status && that_present_flow_status))
        return false;
      if (!this.flow_status.equals(that.flow_status))
        return false;
    }

    boolean this_present_message = true && this.isSetMessage();
    boolean that_present_message = true && that.isSetMessage();
    if (this_present_message || that_present_message) {
      if (!(this_present_message && that_present_message))
        return false;
      if (!this.message.equals(that.message))
        return false;
    }

    boolean this_present_progress = true;
    boolean that_present_progress = true;
    if (this_present_progress || that_present_progress) {
      if (!(this_present_progress && that_present_progress))
        return false;
      if (this.progress != that.progress)
        return false;
    }

    boolean this_present_job_result_list = true && this.isSetJob_result_list();
    boolean that_present_job_result_list = true && that.isSetJob_result_list();
    if (this_present_job_result_list || that_present_job_result_list) {
      if (!(this_present_job_result_list && that_present_job_result_list))
        return false;
      if (!this.job_result_list.equals(that.job_result_list))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Result other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Result typedOther = (Result)other;

    lastComparison = Boolean.valueOf(isSetFlow_status()).compareTo(typedOther.isSetFlow_status());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlow_status()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flow_status, typedOther.flow_status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMessage()).compareTo(typedOther.isSetMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, typedOther.message);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProgress()).compareTo(typedOther.isSetProgress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProgress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.progress, typedOther.progress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJob_result_list()).compareTo(typedOther.isSetJob_result_list());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJob_result_list()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.job_result_list, typedOther.job_result_list);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Result(");
    boolean first = true;

    sb.append("flow_status:");
    if (this.flow_status == null) {
      sb.append("null");
    } else {
      sb.append(this.flow_status);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("message:");
    if (this.message == null) {
      sb.append("null");
    } else {
      sb.append(this.message);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("progress:");
    sb.append(this.progress);
    first = false;
    if (!first) sb.append(", ");
    sb.append("job_result_list:");
    if (this.job_result_list == null) {
      sb.append("null");
    } else {
      sb.append(this.job_result_list);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ResultStandardSchemeFactory implements SchemeFactory {
    public ResultStandardScheme getScheme() {
      return new ResultStandardScheme();
    }
  }

  private static class ResultStandardScheme extends StandardScheme<Result> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Result struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FLOW_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.flow_status = Status.findByValue(iprot.readI32());
              struct.setFlow_statusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.message = iprot.readString();
              struct.setMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PROGRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.progress = iprot.readDouble();
              struct.setProgressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // JOB_RESULT_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list36 = iprot.readListBegin();
                struct.job_result_list = new ArrayList<JobResult>(_list36.size);
                for (int _i37 = 0; _i37 < _list36.size; ++_i37)
                {
                  JobResult _elem38; // required
                  _elem38 = new JobResult();
                  _elem38.read(iprot);
                  struct.job_result_list.add(_elem38);
                }
                iprot.readListEnd();
              }
              struct.setJob_result_listIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Result struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.flow_status != null) {
        oprot.writeFieldBegin(FLOW_STATUS_FIELD_DESC);
        oprot.writeI32(struct.flow_status.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.message != null) {
        oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
        oprot.writeString(struct.message);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PROGRESS_FIELD_DESC);
      oprot.writeDouble(struct.progress);
      oprot.writeFieldEnd();
      if (struct.job_result_list != null) {
        oprot.writeFieldBegin(JOB_RESULT_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.job_result_list.size()));
          for (JobResult _iter39 : struct.job_result_list)
          {
            _iter39.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ResultTupleSchemeFactory implements SchemeFactory {
    public ResultTupleScheme getScheme() {
      return new ResultTupleScheme();
    }
  }

  private static class ResultTupleScheme extends TupleScheme<Result> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Result struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetFlow_status()) {
        optionals.set(0);
      }
      if (struct.isSetMessage()) {
        optionals.set(1);
      }
      if (struct.isSetProgress()) {
        optionals.set(2);
      }
      if (struct.isSetJob_result_list()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetFlow_status()) {
        oprot.writeI32(struct.flow_status.getValue());
      }
      if (struct.isSetMessage()) {
        oprot.writeString(struct.message);
      }
      if (struct.isSetProgress()) {
        oprot.writeDouble(struct.progress);
      }
      if (struct.isSetJob_result_list()) {
        {
          oprot.writeI32(struct.job_result_list.size());
          for (JobResult _iter40 : struct.job_result_list)
          {
            _iter40.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Result struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.flow_status = Status.findByValue(iprot.readI32());
        struct.setFlow_statusIsSet(true);
      }
      if (incoming.get(1)) {
        struct.message = iprot.readString();
        struct.setMessageIsSet(true);
      }
      if (incoming.get(2)) {
        struct.progress = iprot.readDouble();
        struct.setProgressIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list41 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.job_result_list = new ArrayList<JobResult>(_list41.size);
          for (int _i42 = 0; _i42 < _list41.size; ++_i42)
          {
            JobResult _elem43; // required
            _elem43 = new JobResult();
            _elem43.read(iprot);
            struct.job_result_list.add(_elem43);
          }
        }
        struct.setJob_result_listIsSet(true);
      }
    }
  }

}

