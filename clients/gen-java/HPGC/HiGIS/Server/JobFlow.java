/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package HPGC.HiGIS.Server;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class JobFlow implements org.apache.thrift.TBase<JobFlow, JobFlow._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("JobFlow");

  private static final org.apache.thrift.protocol.TField JOBS_FIELD_DESC = new org.apache.thrift.protocol.TField("jobs", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField JOB_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("job_count", org.apache.thrift.protocol.TType.I32, (short)2);

  public List<Job> jobs; // required
  public int job_count; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    JOBS((short)1, "jobs"),
    JOB_COUNT((short)2, "job_count");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // JOBS
          return JOBS;
        case 2: // JOB_COUNT
          return JOB_COUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __JOB_COUNT_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.JOBS, new org.apache.thrift.meta_data.FieldMetaData("jobs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Job.class))));
    tmpMap.put(_Fields.JOB_COUNT, new org.apache.thrift.meta_data.FieldMetaData("job_count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(JobFlow.class, metaDataMap);
  }

  public JobFlow() {
  }

  public JobFlow(
    List<Job> jobs,
    int job_count)
  {
    this();
    this.jobs = jobs;
    this.job_count = job_count;
    setJob_countIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public JobFlow(JobFlow other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetJobs()) {
      List<Job> __this__jobs = new ArrayList<Job>();
      for (Job other_element : other.jobs) {
        __this__jobs.add(new Job(other_element));
      }
      this.jobs = __this__jobs;
    }
    this.job_count = other.job_count;
  }

  public JobFlow deepCopy() {
    return new JobFlow(this);
  }

  @Override
  public void clear() {
    this.jobs = null;
    setJob_countIsSet(false);
    this.job_count = 0;
  }

  public int getJobsSize() {
    return (this.jobs == null) ? 0 : this.jobs.size();
  }

  public java.util.Iterator<Job> getJobsIterator() {
    return (this.jobs == null) ? null : this.jobs.iterator();
  }

  public void addToJobs(Job elem) {
    if (this.jobs == null) {
      this.jobs = new ArrayList<Job>();
    }
    this.jobs.add(elem);
  }

  public List<Job> getJobs() {
    return this.jobs;
  }

  public JobFlow setJobs(List<Job> jobs) {
    this.jobs = jobs;
    return this;
  }

  public void unsetJobs() {
    this.jobs = null;
  }

  /** Returns true if field jobs is set (has been assigned a value) and false otherwise */
  public boolean isSetJobs() {
    return this.jobs != null;
  }

  public void setJobsIsSet(boolean value) {
    if (!value) {
      this.jobs = null;
    }
  }

  public int getJob_count() {
    return this.job_count;
  }

  public JobFlow setJob_count(int job_count) {
    this.job_count = job_count;
    setJob_countIsSet(true);
    return this;
  }

  public void unsetJob_count() {
    __isset_bit_vector.clear(__JOB_COUNT_ISSET_ID);
  }

  /** Returns true if field job_count is set (has been assigned a value) and false otherwise */
  public boolean isSetJob_count() {
    return __isset_bit_vector.get(__JOB_COUNT_ISSET_ID);
  }

  public void setJob_countIsSet(boolean value) {
    __isset_bit_vector.set(__JOB_COUNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case JOBS:
      if (value == null) {
        unsetJobs();
      } else {
        setJobs((List<Job>)value);
      }
      break;

    case JOB_COUNT:
      if (value == null) {
        unsetJob_count();
      } else {
        setJob_count((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case JOBS:
      return getJobs();

    case JOB_COUNT:
      return Integer.valueOf(getJob_count());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case JOBS:
      return isSetJobs();
    case JOB_COUNT:
      return isSetJob_count();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof JobFlow)
      return this.equals((JobFlow)that);
    return false;
  }

  public boolean equals(JobFlow that) {
    if (that == null)
      return false;

    boolean this_present_jobs = true && this.isSetJobs();
    boolean that_present_jobs = true && that.isSetJobs();
    if (this_present_jobs || that_present_jobs) {
      if (!(this_present_jobs && that_present_jobs))
        return false;
      if (!this.jobs.equals(that.jobs))
        return false;
    }

    boolean this_present_job_count = true;
    boolean that_present_job_count = true;
    if (this_present_job_count || that_present_job_count) {
      if (!(this_present_job_count && that_present_job_count))
        return false;
      if (this.job_count != that.job_count)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(JobFlow other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    JobFlow typedOther = (JobFlow)other;

    lastComparison = Boolean.valueOf(isSetJobs()).compareTo(typedOther.isSetJobs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJobs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobs, typedOther.jobs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJob_count()).compareTo(typedOther.isSetJob_count());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJob_count()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.job_count, typedOther.job_count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // JOBS
          if (field.type == org.apache.thrift.protocol.TType.LIST) {
            {
              org.apache.thrift.protocol.TList _list18 = iprot.readListBegin();
              this.jobs = new ArrayList<Job>(_list18.size);
              for (int _i19 = 0; _i19 < _list18.size; ++_i19)
              {
                Job _elem20; // required
                _elem20 = new Job();
                _elem20.read(iprot);
                this.jobs.add(_elem20);
              }
              iprot.readListEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // JOB_COUNT
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.job_count = iprot.readI32();
            setJob_countIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.jobs != null) {
      oprot.writeFieldBegin(JOBS_FIELD_DESC);
      {
        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.jobs.size()));
        for (Job _iter21 : this.jobs)
        {
          _iter21.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(JOB_COUNT_FIELD_DESC);
    oprot.writeI32(this.job_count);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("JobFlow(");
    boolean first = true;

    sb.append("jobs:");
    if (this.jobs == null) {
      sb.append("null");
    } else {
      sb.append(this.jobs);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("job_count:");
    sb.append(this.job_count);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

