/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package HPGC.HiGIS.Server;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Context implements org.apache.thrift.TBase<Context, Context._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Context");

  private static final org.apache.thrift.protocol.TField PARALLEL_ENV_FIELD_DESC = new org.apache.thrift.protocol.TField("parallel_env", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField OPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("options", org.apache.thrift.protocol.TType.MAP, (short)2);

  /**
   * 
   * @see ParallelEnv
   */
  public ParallelEnv parallel_env; // required
  public Map<String,String> options; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see ParallelEnv
     */
    PARALLEL_ENV((short)1, "parallel_env"),
    OPTIONS((short)2, "options");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PARALLEL_ENV
          return PARALLEL_ENV;
        case 2: // OPTIONS
          return OPTIONS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PARALLEL_ENV, new org.apache.thrift.meta_data.FieldMetaData("parallel_env", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ParallelEnv.class)));
    tmpMap.put(_Fields.OPTIONS, new org.apache.thrift.meta_data.FieldMetaData("options", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Context.class, metaDataMap);
  }

  public Context() {
  }

  public Context(
    ParallelEnv parallel_env,
    Map<String,String> options)
  {
    this();
    this.parallel_env = parallel_env;
    this.options = options;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Context(Context other) {
    if (other.isSetParallel_env()) {
      this.parallel_env = other.parallel_env;
    }
    if (other.isSetOptions()) {
      Map<String,String> __this__options = new HashMap<String,String>();
      for (Map.Entry<String, String> other_element : other.options.entrySet()) {

        String other_element_key = other_element.getKey();
        String other_element_value = other_element.getValue();

        String __this__options_copy_key = other_element_key;

        String __this__options_copy_value = other_element_value;

        __this__options.put(__this__options_copy_key, __this__options_copy_value);
      }
      this.options = __this__options;
    }
  }

  public Context deepCopy() {
    return new Context(this);
  }

  @Override
  public void clear() {
    this.parallel_env = null;
    this.options = null;
  }

  /**
   * 
   * @see ParallelEnv
   */
  public ParallelEnv getParallel_env() {
    return this.parallel_env;
  }

  /**
   * 
   * @see ParallelEnv
   */
  public Context setParallel_env(ParallelEnv parallel_env) {
    this.parallel_env = parallel_env;
    return this;
  }

  public void unsetParallel_env() {
    this.parallel_env = null;
  }

  /** Returns true if field parallel_env is set (has been assigned a value) and false otherwise */
  public boolean isSetParallel_env() {
    return this.parallel_env != null;
  }

  public void setParallel_envIsSet(boolean value) {
    if (!value) {
      this.parallel_env = null;
    }
  }

  public int getOptionsSize() {
    return (this.options == null) ? 0 : this.options.size();
  }

  public void putToOptions(String key, String val) {
    if (this.options == null) {
      this.options = new HashMap<String,String>();
    }
    this.options.put(key, val);
  }

  public Map<String,String> getOptions() {
    return this.options;
  }

  public Context setOptions(Map<String,String> options) {
    this.options = options;
    return this;
  }

  public void unsetOptions() {
    this.options = null;
  }

  /** Returns true if field options is set (has been assigned a value) and false otherwise */
  public boolean isSetOptions() {
    return this.options != null;
  }

  public void setOptionsIsSet(boolean value) {
    if (!value) {
      this.options = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PARALLEL_ENV:
      if (value == null) {
        unsetParallel_env();
      } else {
        setParallel_env((ParallelEnv)value);
      }
      break;

    case OPTIONS:
      if (value == null) {
        unsetOptions();
      } else {
        setOptions((Map<String,String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PARALLEL_ENV:
      return getParallel_env();

    case OPTIONS:
      return getOptions();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PARALLEL_ENV:
      return isSetParallel_env();
    case OPTIONS:
      return isSetOptions();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Context)
      return this.equals((Context)that);
    return false;
  }

  public boolean equals(Context that) {
    if (that == null)
      return false;

    boolean this_present_parallel_env = true && this.isSetParallel_env();
    boolean that_present_parallel_env = true && that.isSetParallel_env();
    if (this_present_parallel_env || that_present_parallel_env) {
      if (!(this_present_parallel_env && that_present_parallel_env))
        return false;
      if (!this.parallel_env.equals(that.parallel_env))
        return false;
    }

    boolean this_present_options = true && this.isSetOptions();
    boolean that_present_options = true && that.isSetOptions();
    if (this_present_options || that_present_options) {
      if (!(this_present_options && that_present_options))
        return false;
      if (!this.options.equals(that.options))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Context other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Context typedOther = (Context)other;

    lastComparison = Boolean.valueOf(isSetParallel_env()).compareTo(typedOther.isSetParallel_env());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParallel_env()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parallel_env, typedOther.parallel_env);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOptions()).compareTo(typedOther.isSetOptions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOptions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.options, typedOther.options);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // PARALLEL_ENV
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.parallel_env = ParallelEnv.findByValue(iprot.readI32());
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // OPTIONS
          if (field.type == org.apache.thrift.protocol.TType.MAP) {
            {
              org.apache.thrift.protocol.TMap _map4 = iprot.readMapBegin();
              this.options = new HashMap<String,String>(2*_map4.size);
              for (int _i5 = 0; _i5 < _map4.size; ++_i5)
              {
                String _key6; // required
                String _val7; // required
                _key6 = iprot.readString();
                _val7 = iprot.readString();
                this.options.put(_key6, _val7);
              }
              iprot.readMapEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.parallel_env != null) {
      oprot.writeFieldBegin(PARALLEL_ENV_FIELD_DESC);
      oprot.writeI32(this.parallel_env.getValue());
      oprot.writeFieldEnd();
    }
    if (this.options != null) {
      oprot.writeFieldBegin(OPTIONS_FIELD_DESC);
      {
        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, this.options.size()));
        for (Map.Entry<String, String> _iter8 : this.options.entrySet())
        {
          oprot.writeString(_iter8.getKey());
          oprot.writeString(_iter8.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Context(");
    boolean first = true;

    sb.append("parallel_env:");
    if (this.parallel_env == null) {
      sb.append("null");
    } else {
      sb.append(this.parallel_env);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("options:");
    if (this.options == null) {
      sb.append("null");
    } else {
      sb.append(this.options);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

