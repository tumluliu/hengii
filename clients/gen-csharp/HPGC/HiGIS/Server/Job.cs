/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace HPGC.HiGIS.Server
{

  [Serializable]
  public partial class Job : TBase
  {
    private int _id;
    private List<int> _parents;
    private int _parent_count;
    private List<int> _children;
    private int _child_count;
    private int _app_id;
    private Dictionary<string, string> _app_options;
    private Context _runtime_context;

    public int Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }

    public List<int> Parents
    {
      get
      {
        return _parents;
      }
      set
      {
        __isset.parents = true;
        this._parents = value;
      }
    }

    public int Parent_count
    {
      get
      {
        return _parent_count;
      }
      set
      {
        __isset.parent_count = true;
        this._parent_count = value;
      }
    }

    public List<int> Children
    {
      get
      {
        return _children;
      }
      set
      {
        __isset.children = true;
        this._children = value;
      }
    }

    public int Child_count
    {
      get
      {
        return _child_count;
      }
      set
      {
        __isset.child_count = true;
        this._child_count = value;
      }
    }

    public int App_id
    {
      get
      {
        return _app_id;
      }
      set
      {
        __isset.app_id = true;
        this._app_id = value;
      }
    }

    public Dictionary<string, string> App_options
    {
      get
      {
        return _app_options;
      }
      set
      {
        __isset.app_options = true;
        this._app_options = value;
      }
    }

    public Context Runtime_context
    {
      get
      {
        return _runtime_context;
      }
      set
      {
        __isset.runtime_context = true;
        this._runtime_context = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool id;
      public bool parents;
      public bool parent_count;
      public bool children;
      public bool child_count;
      public bool app_id;
      public bool app_options;
      public bool runtime_context;
    }

    public Job() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              Id = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                Parents = new List<int>();
                TList _list5 = iprot.ReadListBegin();
                for( int _i6 = 0; _i6 < _list5.Count; ++_i6)
                {
                  int _elem7 = 0;
                  _elem7 = iprot.ReadI32();
                  Parents.Add(_elem7);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              Parent_count = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.List) {
              {
                Children = new List<int>();
                TList _list8 = iprot.ReadListBegin();
                for( int _i9 = 0; _i9 < _list8.Count; ++_i9)
                {
                  int _elem10 = 0;
                  _elem10 = iprot.ReadI32();
                  Children.Add(_elem10);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              Child_count = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              App_id = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.Map) {
              {
                App_options = new Dictionary<string, string>();
                TMap _map11 = iprot.ReadMapBegin();
                for( int _i12 = 0; _i12 < _map11.Count; ++_i12)
                {
                  string _key13;
                  string _val14;
                  _key13 = iprot.ReadString();
                  _val14 = iprot.ReadString();
                  App_options[_key13] = _val14;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.Struct) {
              Runtime_context = new Context();
              Runtime_context.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("Job");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.id) {
        field.Name = "id";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Id);
        oprot.WriteFieldEnd();
      }
      if (Parents != null && __isset.parents) {
        field.Name = "parents";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I32, Parents.Count));
          foreach (int _iter15 in Parents)
          {
            oprot.WriteI32(_iter15);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.parent_count) {
        field.Name = "parent_count";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Parent_count);
        oprot.WriteFieldEnd();
      }
      if (Children != null && __isset.children) {
        field.Name = "children";
        field.Type = TType.List;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I32, Children.Count));
          foreach (int _iter16 in Children)
          {
            oprot.WriteI32(_iter16);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.child_count) {
        field.Name = "child_count";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Child_count);
        oprot.WriteFieldEnd();
      }
      if (__isset.app_id) {
        field.Name = "app_id";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(App_id);
        oprot.WriteFieldEnd();
      }
      if (App_options != null && __isset.app_options) {
        field.Name = "app_options";
        field.Type = TType.Map;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.String, App_options.Count));
          foreach (string _iter17 in App_options.Keys)
          {
            oprot.WriteString(_iter17);
            oprot.WriteString(App_options[_iter17]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Runtime_context != null && __isset.runtime_context) {
        field.Name = "runtime_context";
        field.Type = TType.Struct;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        Runtime_context.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("Job(");
      sb.Append("Id: ");
      sb.Append(Id);
      sb.Append(",Parents: ");
      sb.Append(Parents);
      sb.Append(",Parent_count: ");
      sb.Append(Parent_count);
      sb.Append(",Children: ");
      sb.Append(Children);
      sb.Append(",Child_count: ");
      sb.Append(Child_count);
      sb.Append(",App_id: ");
      sb.Append(App_id);
      sb.Append(",App_options: ");
      sb.Append(App_options);
      sb.Append(",Runtime_context: ");
      sb.Append(Runtime_context== null ? "<null>" : Runtime_context.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }

}
