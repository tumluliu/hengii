/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace HPGC.HiGIS.Server
{

  [Serializable]
  public partial class JobFlow : TBase
  {
    private List<Job> _jobs;
    private int _job_count;

    public List<Job> Jobs
    {
      get
      {
        return _jobs;
      }
      set
      {
        __isset.jobs = true;
        this._jobs = value;
      }
    }

    public int Job_count
    {
      get
      {
        return _job_count;
      }
      set
      {
        __isset.job_count = true;
        this._job_count = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool jobs;
      public bool job_count;
    }

    public JobFlow() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List) {
              {
                Jobs = new List<Job>();
                TList _list18 = iprot.ReadListBegin();
                for( int _i19 = 0; _i19 < _list18.Count; ++_i19)
                {
                  Job _elem20 = new Job();
                  _elem20 = new Job();
                  _elem20.Read(iprot);
                  Jobs.Add(_elem20);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              Job_count = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("JobFlow");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Jobs != null && __isset.jobs) {
        field.Name = "jobs";
        field.Type = TType.List;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Jobs.Count));
          foreach (Job _iter21 in Jobs)
          {
            _iter21.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.job_count) {
        field.Name = "job_count";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Job_count);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("JobFlow(");
      sb.Append("Jobs: ");
      sb.Append(Jobs);
      sb.Append(",Job_count: ");
      sb.Append(Job_count);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
