/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace HPGC.HiGIS.Server
{
  public class HpgcJob {
    public interface Iface {
      long start_single_job(Job job, string user_id);
      long start(JobFlow flow, string user_id);
      void pause(long client_ticket);
      void resume(long client_ticket);
      void cancel(long client_ticket);
      Result get_status(long client_ticket);
      List<long> get_my_requests(string user_id);
      List<long> get_all_requests();
    }

    public class Client : Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      public long start_single_job(Job job, string user_id)
      {
        send_start_single_job(job, user_id);
        return recv_start_single_job();
      }

      public void send_start_single_job(Job job, string user_id)
      {
        oprot_.WriteMessageBegin(new TMessage("start_single_job", TMessageType.Call, seqid_));
        start_single_job_args args = new start_single_job_args();
        args.Job = job;
        args.User_id = user_id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public long recv_start_single_job()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        start_single_job_result result = new start_single_job_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "start_single_job failed: unknown result");
      }

      public long start(JobFlow flow, string user_id)
      {
        send_start(flow, user_id);
        return recv_start();
      }

      public void send_start(JobFlow flow, string user_id)
      {
        oprot_.WriteMessageBegin(new TMessage("start", TMessageType.Call, seqid_));
        start_args args = new start_args();
        args.Flow = flow;
        args.User_id = user_id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public long recv_start()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        start_result result = new start_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "start failed: unknown result");
      }

      public void pause(long client_ticket)
      {
        send_pause(client_ticket);
        recv_pause();
      }

      public void send_pause(long client_ticket)
      {
        oprot_.WriteMessageBegin(new TMessage("pause", TMessageType.Call, seqid_));
        pause_args args = new pause_args();
        args.Client_ticket = client_ticket;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_pause()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        pause_result result = new pause_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      public void resume(long client_ticket)
      {
        send_resume(client_ticket);
        recv_resume();
      }

      public void send_resume(long client_ticket)
      {
        oprot_.WriteMessageBegin(new TMessage("resume", TMessageType.Call, seqid_));
        resume_args args = new resume_args();
        args.Client_ticket = client_ticket;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_resume()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        resume_result result = new resume_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      public void cancel(long client_ticket)
      {
        send_cancel(client_ticket);
        recv_cancel();
      }

      public void send_cancel(long client_ticket)
      {
        oprot_.WriteMessageBegin(new TMessage("cancel", TMessageType.Call, seqid_));
        cancel_args args = new cancel_args();
        args.Client_ticket = client_ticket;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_cancel()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        cancel_result result = new cancel_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      public Result get_status(long client_ticket)
      {
        send_get_status(client_ticket);
        return recv_get_status();
      }

      public void send_get_status(long client_ticket)
      {
        oprot_.WriteMessageBegin(new TMessage("get_status", TMessageType.Call, seqid_));
        get_status_args args = new get_status_args();
        args.Client_ticket = client_ticket;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public Result recv_get_status()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        get_status_result result = new get_status_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_status failed: unknown result");
      }

      public List<long> get_my_requests(string user_id)
      {
        send_get_my_requests(user_id);
        return recv_get_my_requests();
      }

      public void send_get_my_requests(string user_id)
      {
        oprot_.WriteMessageBegin(new TMessage("get_my_requests", TMessageType.Call, seqid_));
        get_my_requests_args args = new get_my_requests_args();
        args.User_id = user_id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<long> recv_get_my_requests()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        get_my_requests_result result = new get_my_requests_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_my_requests failed: unknown result");
      }

      public List<long> get_all_requests()
      {
        send_get_all_requests();
        return recv_get_all_requests();
      }

      public void send_get_all_requests()
      {
        oprot_.WriteMessageBegin(new TMessage("get_all_requests", TMessageType.Call, seqid_));
        get_all_requests_args args = new get_all_requests_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<long> recv_get_all_requests()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        get_all_requests_result result = new get_all_requests_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_all_requests failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["start_single_job"] = start_single_job_Process;
        processMap_["start"] = start_Process;
        processMap_["pause"] = pause_Process;
        processMap_["resume"] = resume_Process;
        processMap_["cancel"] = cancel_Process;
        processMap_["get_status"] = get_status_Process;
        processMap_["get_my_requests"] = get_my_requests_Process;
        processMap_["get_all_requests"] = get_all_requests_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void start_single_job_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        start_single_job_args args = new start_single_job_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        start_single_job_result result = new start_single_job_result();
        try {
          result.Success = iface_.start_single_job(args.Job, args.User_id);
        } catch (HpgcJobException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("start_single_job", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void start_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        start_args args = new start_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        start_result result = new start_result();
        try {
          result.Success = iface_.start(args.Flow, args.User_id);
        } catch (HpgcJobException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("start", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void pause_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        pause_args args = new pause_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        pause_result result = new pause_result();
        iface_.pause(args.Client_ticket);
        oprot.WriteMessageBegin(new TMessage("pause", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void resume_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        resume_args args = new resume_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        resume_result result = new resume_result();
        iface_.resume(args.Client_ticket);
        oprot.WriteMessageBegin(new TMessage("resume", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void cancel_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        cancel_args args = new cancel_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        cancel_result result = new cancel_result();
        iface_.cancel(args.Client_ticket);
        oprot.WriteMessageBegin(new TMessage("cancel", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void get_status_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        get_status_args args = new get_status_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        get_status_result result = new get_status_result();
        result.Success = iface_.get_status(args.Client_ticket);
        oprot.WriteMessageBegin(new TMessage("get_status", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void get_my_requests_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        get_my_requests_args args = new get_my_requests_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        get_my_requests_result result = new get_my_requests_result();
        result.Success = iface_.get_my_requests(args.User_id);
        oprot.WriteMessageBegin(new TMessage("get_my_requests", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void get_all_requests_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        get_all_requests_args args = new get_all_requests_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        get_all_requests_result result = new get_all_requests_result();
        result.Success = iface_.get_all_requests();
        oprot.WriteMessageBegin(new TMessage("get_all_requests", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    [Serializable]
    public partial class start_single_job_args : TBase
    {
      private Job _job;
      private string _user_id;

      public Job Job
      {
        get
        {
          return _job;
        }
        set
        {
          __isset.job = true;
          this._job = value;
        }
      }

      public string User_id
      {
        get
        {
          return _user_id;
        }
        set
        {
          __isset.user_id = true;
          this._user_id = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool job;
        public bool user_id;
      }

      public start_single_job_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Job = new Job();
                Job.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                User_id = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("start_single_job_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Job != null && __isset.job) {
          field.Name = "job";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Job.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (User_id != null && __isset.user_id) {
          field.Name = "user_id";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(User_id);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("start_single_job_args(");
        sb.Append("Job: ");
        sb.Append(Job== null ? "<null>" : Job.ToString());
        sb.Append(",User_id: ");
        sb.Append(User_id);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class start_single_job_result : TBase
    {
      private long _success;
      private HpgcJobException _e;

      public long Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public HpgcJobException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool e;
      }

      public start_single_job_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I64) {
                Success = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new HpgcJobException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("start_single_job_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I64;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("start_single_job_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class start_args : TBase
    {
      private JobFlow _flow;
      private string _user_id;

      public JobFlow Flow
      {
        get
        {
          return _flow;
        }
        set
        {
          __isset.flow = true;
          this._flow = value;
        }
      }

      public string User_id
      {
        get
        {
          return _user_id;
        }
        set
        {
          __isset.user_id = true;
          this._user_id = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool flow;
        public bool user_id;
      }

      public start_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Flow = new JobFlow();
                Flow.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                User_id = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("start_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Flow != null && __isset.flow) {
          field.Name = "flow";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Flow.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (User_id != null && __isset.user_id) {
          field.Name = "user_id";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(User_id);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("start_args(");
        sb.Append("Flow: ");
        sb.Append(Flow== null ? "<null>" : Flow.ToString());
        sb.Append(",User_id: ");
        sb.Append(User_id);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class start_result : TBase
    {
      private long _success;
      private HpgcJobException _e;

      public long Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public HpgcJobException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool e;
      }

      public start_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I64) {
                Success = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new HpgcJobException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("start_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I64;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("start_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class pause_args : TBase
    {
      private long _client_ticket;

      public long Client_ticket
      {
        get
        {
          return _client_ticket;
        }
        set
        {
          __isset.client_ticket = true;
          this._client_ticket = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool client_ticket;
      }

      public pause_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Client_ticket = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("pause_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.client_ticket) {
          field.Name = "client_ticket";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Client_ticket);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("pause_args(");
        sb.Append("Client_ticket: ");
        sb.Append(Client_ticket);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class pause_result : TBase
    {

      public pause_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("pause_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("pause_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class resume_args : TBase
    {
      private long _client_ticket;

      public long Client_ticket
      {
        get
        {
          return _client_ticket;
        }
        set
        {
          __isset.client_ticket = true;
          this._client_ticket = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool client_ticket;
      }

      public resume_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Client_ticket = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("resume_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.client_ticket) {
          field.Name = "client_ticket";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Client_ticket);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("resume_args(");
        sb.Append("Client_ticket: ");
        sb.Append(Client_ticket);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class resume_result : TBase
    {

      public resume_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("resume_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("resume_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class cancel_args : TBase
    {
      private long _client_ticket;

      public long Client_ticket
      {
        get
        {
          return _client_ticket;
        }
        set
        {
          __isset.client_ticket = true;
          this._client_ticket = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool client_ticket;
      }

      public cancel_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Client_ticket = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("cancel_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.client_ticket) {
          field.Name = "client_ticket";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Client_ticket);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("cancel_args(");
        sb.Append("Client_ticket: ");
        sb.Append(Client_ticket);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class cancel_result : TBase
    {

      public cancel_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("cancel_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("cancel_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_status_args : TBase
    {
      private long _client_ticket;

      public long Client_ticket
      {
        get
        {
          return _client_ticket;
        }
        set
        {
          __isset.client_ticket = true;
          this._client_ticket = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool client_ticket;
      }

      public get_status_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Client_ticket = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_status_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.client_ticket) {
          field.Name = "client_ticket";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Client_ticket);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_status_args(");
        sb.Append("Client_ticket: ");
        sb.Append(Client_ticket);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_status_result : TBase
    {
      private Result _success;

      public Result Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public get_status_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Result();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_status_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_status_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_my_requests_args : TBase
    {
      private string _user_id;

      public string User_id
      {
        get
        {
          return _user_id;
        }
        set
        {
          __isset.user_id = true;
          this._user_id = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool user_id;
      }

      public get_my_requests_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                User_id = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_my_requests_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (User_id != null && __isset.user_id) {
          field.Name = "user_id";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(User_id);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_my_requests_args(");
        sb.Append("User_id: ");
        sb.Append(User_id);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_my_requests_result : TBase
    {
      private List<long> _success;

      public List<long> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public get_my_requests_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<long>();
                  TList _list26 = iprot.ReadListBegin();
                  for( int _i27 = 0; _i27 < _list26.Count; ++_i27)
                  {
                    long _elem28 = 0;
                    _elem28 = iprot.ReadI64();
                    Success.Add(_elem28);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_my_requests_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.I64, Success.Count));
              foreach (long _iter29 in Success)
              {
                oprot.WriteI64(_iter29);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_my_requests_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_all_requests_args : TBase
    {

      public get_all_requests_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_all_requests_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_all_requests_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_all_requests_result : TBase
    {
      private List<long> _success;

      public List<long> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public get_all_requests_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<long>();
                  TList _list30 = iprot.ReadListBegin();
                  for( int _i31 = 0; _i31 < _list30.Count; ++_i31)
                  {
                    long _elem32 = 0;
                    _elem32 = iprot.ReadI64();
                    Success.Add(_elem32);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_all_requests_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.I64, Success.Count));
              foreach (long _iter33 in Success)
              {
                oprot.WriteI64(_iter33);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_all_requests_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }

  }
}
