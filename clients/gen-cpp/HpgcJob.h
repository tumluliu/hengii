/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef HpgcJob_H
#define HpgcJob_H

#include <TProcessor.h>
#include "hpgcjob_types.h"

namespace HPGC { namespace HiGIS { namespace Server {

class HpgcJobIf {
 public:
  virtual ~HpgcJobIf() {}
  virtual int32_t start_single_job(const Job& job) = 0;
  virtual int32_t start(const JobFlow& flow) = 0;
  virtual void pause(const int32_t client_ticket) = 0;
  virtual void resume(const int32_t client_ticket) = 0;
  virtual void cancel(const int32_t client_ticket) = 0;
  virtual void get_status(Result& _return, const int32_t client_ticket) = 0;
};

class HpgcJobIfFactory {
 public:
  typedef HpgcJobIf Handler;

  virtual ~HpgcJobIfFactory() {}

  virtual HpgcJobIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(HpgcJobIf* /* handler */) = 0;
};

class HpgcJobIfSingletonFactory : virtual public HpgcJobIfFactory {
 public:
  HpgcJobIfSingletonFactory(const boost::shared_ptr<HpgcJobIf>& iface) : iface_(iface) {}
  virtual ~HpgcJobIfSingletonFactory() {}

  virtual HpgcJobIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(HpgcJobIf* /* handler */) {}

 protected:
  boost::shared_ptr<HpgcJobIf> iface_;
};

class HpgcJobNull : virtual public HpgcJobIf {
 public:
  virtual ~HpgcJobNull() {}
  int32_t start_single_job(const Job& /* job */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t start(const JobFlow& /* flow */) {
    int32_t _return = 0;
    return _return;
  }
  void pause(const int32_t /* client_ticket */) {
    return;
  }
  void resume(const int32_t /* client_ticket */) {
    return;
  }
  void cancel(const int32_t /* client_ticket */) {
    return;
  }
  void get_status(Result& /* _return */, const int32_t /* client_ticket */) {
    return;
  }
};

typedef struct _HpgcJob_start_single_job_args__isset {
  _HpgcJob_start_single_job_args__isset() : job(false) {}
  bool job;
} _HpgcJob_start_single_job_args__isset;

class HpgcJob_start_single_job_args {
 public:

  HpgcJob_start_single_job_args() {
  }

  virtual ~HpgcJob_start_single_job_args() throw() {}

  Job job;

  _HpgcJob_start_single_job_args__isset __isset;

  void __set_job(const Job& val) {
    job = val;
  }

  bool operator == (const HpgcJob_start_single_job_args & rhs) const
  {
    if (!(job == rhs.job))
      return false;
    return true;
  }
  bool operator != (const HpgcJob_start_single_job_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HpgcJob_start_single_job_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HpgcJob_start_single_job_pargs {
 public:


  virtual ~HpgcJob_start_single_job_pargs() throw() {}

  const Job* job;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HpgcJob_start_single_job_result__isset {
  _HpgcJob_start_single_job_result__isset() : success(false), e(false) {}
  bool success;
  bool e;
} _HpgcJob_start_single_job_result__isset;

class HpgcJob_start_single_job_result {
 public:

  HpgcJob_start_single_job_result() : success(0) {
  }

  virtual ~HpgcJob_start_single_job_result() throw() {}

  int32_t success;
  HpgcJobException e;

  _HpgcJob_start_single_job_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  void __set_e(const HpgcJobException& val) {
    e = val;
  }

  bool operator == (const HpgcJob_start_single_job_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const HpgcJob_start_single_job_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HpgcJob_start_single_job_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HpgcJob_start_single_job_presult__isset {
  _HpgcJob_start_single_job_presult__isset() : success(false), e(false) {}
  bool success;
  bool e;
} _HpgcJob_start_single_job_presult__isset;

class HpgcJob_start_single_job_presult {
 public:


  virtual ~HpgcJob_start_single_job_presult() throw() {}

  int32_t* success;
  HpgcJobException e;

  _HpgcJob_start_single_job_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _HpgcJob_start_args__isset {
  _HpgcJob_start_args__isset() : flow(false) {}
  bool flow;
} _HpgcJob_start_args__isset;

class HpgcJob_start_args {
 public:

  HpgcJob_start_args() {
  }

  virtual ~HpgcJob_start_args() throw() {}

  JobFlow flow;

  _HpgcJob_start_args__isset __isset;

  void __set_flow(const JobFlow& val) {
    flow = val;
  }

  bool operator == (const HpgcJob_start_args & rhs) const
  {
    if (!(flow == rhs.flow))
      return false;
    return true;
  }
  bool operator != (const HpgcJob_start_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HpgcJob_start_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HpgcJob_start_pargs {
 public:


  virtual ~HpgcJob_start_pargs() throw() {}

  const JobFlow* flow;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HpgcJob_start_result__isset {
  _HpgcJob_start_result__isset() : success(false), e(false) {}
  bool success;
  bool e;
} _HpgcJob_start_result__isset;

class HpgcJob_start_result {
 public:

  HpgcJob_start_result() : success(0) {
  }

  virtual ~HpgcJob_start_result() throw() {}

  int32_t success;
  HpgcJobException e;

  _HpgcJob_start_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  void __set_e(const HpgcJobException& val) {
    e = val;
  }

  bool operator == (const HpgcJob_start_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const HpgcJob_start_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HpgcJob_start_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HpgcJob_start_presult__isset {
  _HpgcJob_start_presult__isset() : success(false), e(false) {}
  bool success;
  bool e;
} _HpgcJob_start_presult__isset;

class HpgcJob_start_presult {
 public:


  virtual ~HpgcJob_start_presult() throw() {}

  int32_t* success;
  HpgcJobException e;

  _HpgcJob_start_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _HpgcJob_pause_args__isset {
  _HpgcJob_pause_args__isset() : client_ticket(false) {}
  bool client_ticket;
} _HpgcJob_pause_args__isset;

class HpgcJob_pause_args {
 public:

  HpgcJob_pause_args() : client_ticket(0) {
  }

  virtual ~HpgcJob_pause_args() throw() {}

  int32_t client_ticket;

  _HpgcJob_pause_args__isset __isset;

  void __set_client_ticket(const int32_t val) {
    client_ticket = val;
  }

  bool operator == (const HpgcJob_pause_args & rhs) const
  {
    if (!(client_ticket == rhs.client_ticket))
      return false;
    return true;
  }
  bool operator != (const HpgcJob_pause_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HpgcJob_pause_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HpgcJob_pause_pargs {
 public:


  virtual ~HpgcJob_pause_pargs() throw() {}

  const int32_t* client_ticket;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HpgcJob_pause_result {
 public:

  HpgcJob_pause_result() {
  }

  virtual ~HpgcJob_pause_result() throw() {}


  bool operator == (const HpgcJob_pause_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const HpgcJob_pause_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HpgcJob_pause_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HpgcJob_pause_presult {
 public:


  virtual ~HpgcJob_pause_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _HpgcJob_resume_args__isset {
  _HpgcJob_resume_args__isset() : client_ticket(false) {}
  bool client_ticket;
} _HpgcJob_resume_args__isset;

class HpgcJob_resume_args {
 public:

  HpgcJob_resume_args() : client_ticket(0) {
  }

  virtual ~HpgcJob_resume_args() throw() {}

  int32_t client_ticket;

  _HpgcJob_resume_args__isset __isset;

  void __set_client_ticket(const int32_t val) {
    client_ticket = val;
  }

  bool operator == (const HpgcJob_resume_args & rhs) const
  {
    if (!(client_ticket == rhs.client_ticket))
      return false;
    return true;
  }
  bool operator != (const HpgcJob_resume_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HpgcJob_resume_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HpgcJob_resume_pargs {
 public:


  virtual ~HpgcJob_resume_pargs() throw() {}

  const int32_t* client_ticket;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HpgcJob_resume_result {
 public:

  HpgcJob_resume_result() {
  }

  virtual ~HpgcJob_resume_result() throw() {}


  bool operator == (const HpgcJob_resume_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const HpgcJob_resume_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HpgcJob_resume_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HpgcJob_resume_presult {
 public:


  virtual ~HpgcJob_resume_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _HpgcJob_cancel_args__isset {
  _HpgcJob_cancel_args__isset() : client_ticket(false) {}
  bool client_ticket;
} _HpgcJob_cancel_args__isset;

class HpgcJob_cancel_args {
 public:

  HpgcJob_cancel_args() : client_ticket(0) {
  }

  virtual ~HpgcJob_cancel_args() throw() {}

  int32_t client_ticket;

  _HpgcJob_cancel_args__isset __isset;

  void __set_client_ticket(const int32_t val) {
    client_ticket = val;
  }

  bool operator == (const HpgcJob_cancel_args & rhs) const
  {
    if (!(client_ticket == rhs.client_ticket))
      return false;
    return true;
  }
  bool operator != (const HpgcJob_cancel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HpgcJob_cancel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HpgcJob_cancel_pargs {
 public:


  virtual ~HpgcJob_cancel_pargs() throw() {}

  const int32_t* client_ticket;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HpgcJob_cancel_result {
 public:

  HpgcJob_cancel_result() {
  }

  virtual ~HpgcJob_cancel_result() throw() {}


  bool operator == (const HpgcJob_cancel_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const HpgcJob_cancel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HpgcJob_cancel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HpgcJob_cancel_presult {
 public:


  virtual ~HpgcJob_cancel_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _HpgcJob_get_status_args__isset {
  _HpgcJob_get_status_args__isset() : client_ticket(false) {}
  bool client_ticket;
} _HpgcJob_get_status_args__isset;

class HpgcJob_get_status_args {
 public:

  HpgcJob_get_status_args() : client_ticket(0) {
  }

  virtual ~HpgcJob_get_status_args() throw() {}

  int32_t client_ticket;

  _HpgcJob_get_status_args__isset __isset;

  void __set_client_ticket(const int32_t val) {
    client_ticket = val;
  }

  bool operator == (const HpgcJob_get_status_args & rhs) const
  {
    if (!(client_ticket == rhs.client_ticket))
      return false;
    return true;
  }
  bool operator != (const HpgcJob_get_status_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HpgcJob_get_status_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HpgcJob_get_status_pargs {
 public:


  virtual ~HpgcJob_get_status_pargs() throw() {}

  const int32_t* client_ticket;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HpgcJob_get_status_result__isset {
  _HpgcJob_get_status_result__isset() : success(false) {}
  bool success;
} _HpgcJob_get_status_result__isset;

class HpgcJob_get_status_result {
 public:

  HpgcJob_get_status_result() {
  }

  virtual ~HpgcJob_get_status_result() throw() {}

  Result success;

  _HpgcJob_get_status_result__isset __isset;

  void __set_success(const Result& val) {
    success = val;
  }

  bool operator == (const HpgcJob_get_status_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HpgcJob_get_status_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HpgcJob_get_status_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HpgcJob_get_status_presult__isset {
  _HpgcJob_get_status_presult__isset() : success(false) {}
  bool success;
} _HpgcJob_get_status_presult__isset;

class HpgcJob_get_status_presult {
 public:


  virtual ~HpgcJob_get_status_presult() throw() {}

  Result* success;

  _HpgcJob_get_status_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class HpgcJobClient : virtual public HpgcJobIf {
 public:
  HpgcJobClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  HpgcJobClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t start_single_job(const Job& job);
  void send_start_single_job(const Job& job);
  int32_t recv_start_single_job();
  int32_t start(const JobFlow& flow);
  void send_start(const JobFlow& flow);
  int32_t recv_start();
  void pause(const int32_t client_ticket);
  void send_pause(const int32_t client_ticket);
  void recv_pause();
  void resume(const int32_t client_ticket);
  void send_resume(const int32_t client_ticket);
  void recv_resume();
  void cancel(const int32_t client_ticket);
  void send_cancel(const int32_t client_ticket);
  void recv_cancel();
  void get_status(Result& _return, const int32_t client_ticket);
  void send_get_status(const int32_t client_ticket);
  void recv_get_status(Result& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class HpgcJobProcessor : public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<HpgcJobIf> iface_;
  virtual bool process_fn(apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid, void* callContext);
 private:
  std::map<std::string, void (HpgcJobProcessor::*)(int32_t, apache::thrift::protocol::TProtocol*, apache::thrift::protocol::TProtocol*, void*)> processMap_;
  void process_start_single_job(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_start(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_pause(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_resume(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_cancel(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_status(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  HpgcJobProcessor(boost::shared_ptr<HpgcJobIf> iface) :
    iface_(iface) {
    processMap_["start_single_job"] = &HpgcJobProcessor::process_start_single_job;
    processMap_["start"] = &HpgcJobProcessor::process_start;
    processMap_["pause"] = &HpgcJobProcessor::process_pause;
    processMap_["resume"] = &HpgcJobProcessor::process_resume;
    processMap_["cancel"] = &HpgcJobProcessor::process_cancel;
    processMap_["get_status"] = &HpgcJobProcessor::process_get_status;
  }

  virtual bool process(boost::shared_ptr<apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr<apache::thrift::protocol::TProtocol> poprot, void* callContext);
  virtual ~HpgcJobProcessor() {}
};

class HpgcJobProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  HpgcJobProcessorFactory(const ::boost::shared_ptr< HpgcJobIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< HpgcJobIfFactory > handlerFactory_;
};

class HpgcJobMultiface : virtual public HpgcJobIf {
 public:
  HpgcJobMultiface(std::vector<boost::shared_ptr<HpgcJobIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~HpgcJobMultiface() {}
 protected:
  std::vector<boost::shared_ptr<HpgcJobIf> > ifaces_;
  HpgcJobMultiface() {}
  void add(boost::shared_ptr<HpgcJobIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t start_single_job(const Job& job) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->start_single_job(job);
      } else {
        ifaces_[i]->start_single_job(job);
      }
    }
  }

  int32_t start(const JobFlow& flow) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->start(flow);
      } else {
        ifaces_[i]->start(flow);
      }
    }
  }

  void pause(const int32_t client_ticket) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->pause(client_ticket);
    }
  }

  void resume(const int32_t client_ticket) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->resume(client_ticket);
    }
  }

  void cancel(const int32_t client_ticket) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->cancel(client_ticket);
    }
  }

  void get_status(Result& _return, const int32_t client_ticket) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->get_status(_return, client_ticket);
        return;
      } else {
        ifaces_[i]->get_status(_return, client_ticket);
      }
    }
  }

};

}}} // namespace

#endif
