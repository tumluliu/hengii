#
# Autogenerated by Thrift Compiler (0.8.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class ParallelEnv:
  MPI = 1
  OPENMP = 2
  CUDA = 3
  MAPREDUCE = 4

  _VALUES_TO_NAMES = {
    1: "MPI",
    2: "OPENMP",
    3: "CUDA",
    4: "MAPREDUCE",
  }

  _NAMES_TO_VALUES = {
    "MPI": 1,
    "OPENMP": 2,
    "CUDA": 3,
    "MAPREDUCE": 4,
  }

class JobStatus:
  FINISHED = 1
  RUNNING = 2
  WAITING_FOR_SUBMIT = 3
  QUEUING = 4
  FAILED = 5
  NOT_EXIST = 6
  PAUSED = 7

  _VALUES_TO_NAMES = {
    1: "FINISHED",
    2: "RUNNING",
    3: "WAITING_FOR_SUBMIT",
    4: "QUEUING",
    5: "FAILED",
    6: "NOT_EXIST",
    7: "PAUSED",
  }

  _NAMES_TO_VALUES = {
    "FINISHED": 1,
    "RUNNING": 2,
    "WAITING_FOR_SUBMIT": 3,
    "QUEUING": 4,
    "FAILED": 5,
    "NOT_EXIST": 6,
    "PAUSED": 7,
  }

class Status:
  FINISHED = 1
  RUNNING = 2
  FAILED = 3
  NOT_EXIST = 4
  PAUSED = 5

  _VALUES_TO_NAMES = {
    1: "FINISHED",
    2: "RUNNING",
    3: "FAILED",
    4: "NOT_EXIST",
    5: "PAUSED",
  }

  _NAMES_TO_VALUES = {
    "FINISHED": 1,
    "RUNNING": 2,
    "FAILED": 3,
    "NOT_EXIST": 4,
    "PAUSED": 5,
  }


class Context:
  """
  Attributes:
   - parallel_env
   - options
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'parallel_env', None, None, ), # 1
    (2, TType.MAP, 'options', (TType.STRING,None,TType.STRING,None), None, ), # 2
  )

  def __init__(self, parallel_env=None, options=None,):
    self.parallel_env = parallel_env
    self.options = options

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.parallel_env = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.MAP:
          self.options = {}
          (_ktype1, _vtype2, _size0 ) = iprot.readMapBegin() 
          for _i4 in xrange(_size0):
            _key5 = iprot.readString();
            _val6 = iprot.readString();
            self.options[_key5] = _val6
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Context')
    if self.parallel_env is not None:
      oprot.writeFieldBegin('parallel_env', TType.I32, 1)
      oprot.writeI32(self.parallel_env)
      oprot.writeFieldEnd()
    if self.options is not None:
      oprot.writeFieldBegin('options', TType.MAP, 2)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.options))
      for kiter7,viter8 in self.options.items():
        oprot.writeString(kiter7)
        oprot.writeString(viter8)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Job:
  """
  Attributes:
   - id
   - parents
   - parent_count
   - children
   - child_count
   - app_id
   - app_options
   - runtime_context
   - app_uri
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.LIST, 'parents', (TType.I32,None), None, ), # 2
    (3, TType.I32, 'parent_count', None, None, ), # 3
    (4, TType.LIST, 'children', (TType.I32,None), None, ), # 4
    (5, TType.I32, 'child_count', None, None, ), # 5
    (6, TType.I32, 'app_id', None, None, ), # 6
    (7, TType.MAP, 'app_options', (TType.STRING,None,TType.STRING,None), None, ), # 7
    (8, TType.STRUCT, 'runtime_context', (Context, Context.thrift_spec), None, ), # 8
    (9, TType.STRING, 'app_uri', None, None, ), # 9
  )

  def __init__(self, id=None, parents=None, parent_count=None, children=None, child_count=None, app_id=None, app_options=None, runtime_context=None, app_uri=None,):
    self.id = id
    self.parents = parents
    self.parent_count = parent_count
    self.children = children
    self.child_count = child_count
    self.app_id = app_id
    self.app_options = app_options
    self.runtime_context = runtime_context
    self.app_uri = app_uri

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.parents = []
          (_etype12, _size9) = iprot.readListBegin()
          for _i13 in xrange(_size9):
            _elem14 = iprot.readI32();
            self.parents.append(_elem14)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.parent_count = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.children = []
          (_etype18, _size15) = iprot.readListBegin()
          for _i19 in xrange(_size15):
            _elem20 = iprot.readI32();
            self.children.append(_elem20)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.child_count = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.app_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.MAP:
          self.app_options = {}
          (_ktype22, _vtype23, _size21 ) = iprot.readMapBegin() 
          for _i25 in xrange(_size21):
            _key26 = iprot.readString();
            _val27 = iprot.readString();
            self.app_options[_key26] = _val27
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRUCT:
          self.runtime_context = Context()
          self.runtime_context.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.app_uri = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Job')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.parents is not None:
      oprot.writeFieldBegin('parents', TType.LIST, 2)
      oprot.writeListBegin(TType.I32, len(self.parents))
      for iter28 in self.parents:
        oprot.writeI32(iter28)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.parent_count is not None:
      oprot.writeFieldBegin('parent_count', TType.I32, 3)
      oprot.writeI32(self.parent_count)
      oprot.writeFieldEnd()
    if self.children is not None:
      oprot.writeFieldBegin('children', TType.LIST, 4)
      oprot.writeListBegin(TType.I32, len(self.children))
      for iter29 in self.children:
        oprot.writeI32(iter29)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.child_count is not None:
      oprot.writeFieldBegin('child_count', TType.I32, 5)
      oprot.writeI32(self.child_count)
      oprot.writeFieldEnd()
    if self.app_id is not None:
      oprot.writeFieldBegin('app_id', TType.I32, 6)
      oprot.writeI32(self.app_id)
      oprot.writeFieldEnd()
    if self.app_options is not None:
      oprot.writeFieldBegin('app_options', TType.MAP, 7)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.app_options))
      for kiter30,viter31 in self.app_options.items():
        oprot.writeString(kiter30)
        oprot.writeString(viter31)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.runtime_context is not None:
      oprot.writeFieldBegin('runtime_context', TType.STRUCT, 8)
      self.runtime_context.write(oprot)
      oprot.writeFieldEnd()
    if self.app_uri is not None:
      oprot.writeFieldBegin('app_uri', TType.STRING, 9)
      oprot.writeString(self.app_uri)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class JobResult:
  """
  Attributes:
   - message
   - progress
   - status
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'message', None, None, ), # 1
    (2, TType.DOUBLE, 'progress', None, None, ), # 2
    (3, TType.I32, 'status', None, None, ), # 3
  )

  def __init__(self, message=None, progress=None, status=None,):
    self.message = message
    self.progress = progress
    self.status = status

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.message = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.progress = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.status = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('JobResult')
    if self.message is not None:
      oprot.writeFieldBegin('message', TType.STRING, 1)
      oprot.writeString(self.message)
      oprot.writeFieldEnd()
    if self.progress is not None:
      oprot.writeFieldBegin('progress', TType.DOUBLE, 2)
      oprot.writeDouble(self.progress)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 3)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Result:
  """
  Attributes:
   - flow_status
   - message
   - progress
   - job_result_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'flow_status', None, None, ), # 1
    (2, TType.STRING, 'message', None, None, ), # 2
    (3, TType.DOUBLE, 'progress', None, None, ), # 3
    (4, TType.LIST, 'job_result_list', (TType.STRUCT,(JobResult, JobResult.thrift_spec)), None, ), # 4
  )

  def __init__(self, flow_status=None, message=None, progress=None, job_result_list=None,):
    self.flow_status = flow_status
    self.message = message
    self.progress = progress
    self.job_result_list = job_result_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.flow_status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.message = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.progress = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.job_result_list = []
          (_etype35, _size32) = iprot.readListBegin()
          for _i36 in xrange(_size32):
            _elem37 = JobResult()
            _elem37.read(iprot)
            self.job_result_list.append(_elem37)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Result')
    if self.flow_status is not None:
      oprot.writeFieldBegin('flow_status', TType.I32, 1)
      oprot.writeI32(self.flow_status)
      oprot.writeFieldEnd()
    if self.message is not None:
      oprot.writeFieldBegin('message', TType.STRING, 2)
      oprot.writeString(self.message)
      oprot.writeFieldEnd()
    if self.progress is not None:
      oprot.writeFieldBegin('progress', TType.DOUBLE, 3)
      oprot.writeDouble(self.progress)
      oprot.writeFieldEnd()
    if self.job_result_list is not None:
      oprot.writeFieldBegin('job_result_list', TType.LIST, 4)
      oprot.writeListBegin(TType.STRUCT, len(self.job_result_list))
      for iter38 in self.job_result_list:
        iter38.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class JobFlow:
  """
  Attributes:
   - jobs
   - job_count
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'jobs', (TType.STRUCT,(Job, Job.thrift_spec)), None, ), # 1
    (2, TType.I32, 'job_count', None, None, ), # 2
  )

  def __init__(self, jobs=None, job_count=None,):
    self.jobs = jobs
    self.job_count = job_count

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.jobs = []
          (_etype42, _size39) = iprot.readListBegin()
          for _i43 in xrange(_size39):
            _elem44 = Job()
            _elem44.read(iprot)
            self.jobs.append(_elem44)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.job_count = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('JobFlow')
    if self.jobs is not None:
      oprot.writeFieldBegin('jobs', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.jobs))
      for iter45 in self.jobs:
        iter45.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.job_count is not None:
      oprot.writeFieldBegin('job_count', TType.I32, 2)
      oprot.writeI32(self.job_count)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HpgcJobException(TException):
  """
  Attributes:
   - app_id
   - name
   - message
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'app_id', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.STRING, 'message', None, None, ), # 3
  )

  def __init__(self, app_id=None, name=None, message=None,):
    self.app_id = app_id
    self.name = name
    self.message = message

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.app_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.message = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HpgcJobException')
    if self.app_id is not None:
      oprot.writeFieldBegin('app_id', TType.I32, 1)
      oprot.writeI32(self.app_id)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.message is not None:
      oprot.writeFieldBegin('message', TType.STRING, 3)
      oprot.writeString(self.message)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __str__(self):
    return repr(self)

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
