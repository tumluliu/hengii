#! /bin/sh
hpgcserver_BIN=/root/hpgcserver

. /etc/rc.status

# Shell functions sourced from /etc/rc.status:
#      rc_check         check and set local and overall rc status
#      rc_status        check and set local and overall rc status
#      rc_status -v     ditto but be verbose in local rc status
#      rc_status -v -r  ditto and clear the local rc status
#      rc_failed        set local and overall rc status to failed
#      rc_reset         clear local rc status (overall remains)
#      rc_exit          exit appropriate to overall rc status

# First reset status of this service
rc_reset

case "$1" in
	start)
		echo -n "Starting hpgcserver daemon"
		## Start daemon with startproc(8). If this fails
		## the echo return value is set appropriate.

		startproc -f $hpgcserver_BIN

		# Remember status and be verbose
		rc_status -v
		;;
	stop)
		echo -n "Shutting down hpgcserver daemon"
		## Stop daemon with killproc(8) and if this fails
		## set echo the echo return value.

		killproc -TERM $hpgcserver_BIN

		# Remember status and be verbose
		rc_status -v
		;;
	restart)
		## Stop the service and regardless of whether it was
		## running or not, start it again.
		$0 stop
		$0 start

		# Remember status and be quiet
		rc_status
		;;
	status)
		echo -n "Checking for service hpgcserver "
		## Check status with checkproc(8), if process is running
		## checkproc will return with exit status 0.

		# Status has a slightly different for the status command:
		# 0 - service running
		# 1 - service dead, but /var/run/  pid  file exists
		# 2 - service dead, but /var/lock/ lock file exists
		# 3 - service not running

		checkproc $hpgcserver_BIN
		rc_status -v
		;;
	*)
		echo "Usage: $0 {start|stop|restart}"
		exit 1
		;;
esac
rc_exit
