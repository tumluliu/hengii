// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "HpgcJob.h"
#include <protocol/TBinaryProtocol.h>
#include <server/TSimpleServer.h>
#include <transport/TServerSocket.h>
#include <transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::hpgc::higis::interface;

class HpgcJobHandler : virtual public HpgcJobIf {
 public:
  HpgcJobHandler() {
    // Your initialization goes here
  }

  int64_t start_single_job(const Job& job, const std::string& user_id) {
    // Your implementation goes here
    printf("start_single_job\n");
  }

  int64_t start(const JobFlow& flow, const std::string& user_id) {
    // Your implementation goes here
    printf("start\n");
  }

  void pause(const int64_t client_ticket) {
    // Your implementation goes here
    printf("pause\n");
  }

  void resume(const int64_t client_ticket) {
    // Your implementation goes here
    printf("resume\n");
  }

  void cancel(const int64_t client_ticket) {
    // Your implementation goes here
    printf("cancel\n");
  }

  void get_status(Result& _return, const int64_t client_ticket) {
    // Your implementation goes here
    printf("get_status\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<HpgcJobHandler> handler(new HpgcJobHandler());
  shared_ptr<TProcessor> processor(new HpgcJobProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

