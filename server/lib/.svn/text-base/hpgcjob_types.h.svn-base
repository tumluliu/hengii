/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef hpgcjob_TYPES_H
#define hpgcjob_TYPES_H

#include <Thrift.h>
#include <TApplicationException.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>



namespace HPGC { namespace HiGIS { namespace Server {

struct ParallelEnv {
  enum type {
    MPI = 1,
    OPENMP = 2,
    CUDA = 3,
    MAPREDUCE = 4
  };
};

extern const std::map<int, const char*> _ParallelEnv_VALUES_TO_NAMES;

typedef struct _Context__isset {
  _Context__isset() : parallel_env(false), options(false) {}
  bool parallel_env;
  bool options;
} _Context__isset;

class Context {
 public:

  static const char* ascii_fingerprint; // = "B089C846F881A6F18D64AA924E6643EF";
  static const uint8_t binary_fingerprint[16]; // = {0xB0,0x89,0xC8,0x46,0xF8,0x81,0xA6,0xF1,0x8D,0x64,0xAA,0x92,0x4E,0x66,0x43,0xEF};

  Context() {
  }

  virtual ~Context() throw() {}

  ParallelEnv::type parallel_env;
  std::map<std::string, std::string>  options;

  _Context__isset __isset;

  void __set_parallel_env(const ParallelEnv::type val) {
    parallel_env = val;
  }

  void __set_options(const std::map<std::string, std::string> & val) {
    options = val;
  }

  bool operator == (const Context & rhs) const
  {
    if (!(parallel_env == rhs.parallel_env))
      return false;
    if (!(options == rhs.options))
      return false;
    return true;
  }
  bool operator != (const Context &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Context & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Job__isset {
  _Job__isset() : id(false), parents(false), parent_count(false), children(false), child_count(false), app_id(false), app_options(false), runtime_context(false) {}
  bool id;
  bool parents;
  bool parent_count;
  bool children;
  bool child_count;
  bool app_id;
  bool app_options;
  bool runtime_context;
} _Job__isset;

class Job {
 public:

  static const char* ascii_fingerprint; // = "83FE5B1B448D7771A03DA5872C01654D";
  static const uint8_t binary_fingerprint[16]; // = {0x83,0xFE,0x5B,0x1B,0x44,0x8D,0x77,0x71,0xA0,0x3D,0xA5,0x87,0x2C,0x01,0x65,0x4D};

  Job() : id(0), parent_count(0), child_count(0), app_id(0) {
  }

  virtual ~Job() throw() {}

  int32_t id;
  std::vector<int32_t>  parents;
  int32_t parent_count;
  std::vector<int32_t>  children;
  int32_t child_count;
  int32_t app_id;
  std::map<std::string, std::string>  app_options;
  Context runtime_context;

  _Job__isset __isset;

  void __set_id(const int32_t val) {
    id = val;
  }

  void __set_parents(const std::vector<int32_t> & val) {
    parents = val;
  }

  void __set_parent_count(const int32_t val) {
    parent_count = val;
  }

  void __set_children(const std::vector<int32_t> & val) {
    children = val;
  }

  void __set_child_count(const int32_t val) {
    child_count = val;
  }

  void __set_app_id(const int32_t val) {
    app_id = val;
  }

  void __set_app_options(const std::map<std::string, std::string> & val) {
    app_options = val;
  }

  void __set_runtime_context(const Context& val) {
    runtime_context = val;
  }

  bool operator == (const Job & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(parents == rhs.parents))
      return false;
    if (!(parent_count == rhs.parent_count))
      return false;
    if (!(children == rhs.children))
      return false;
    if (!(child_count == rhs.child_count))
      return false;
    if (!(app_id == rhs.app_id))
      return false;
    if (!(app_options == rhs.app_options))
      return false;
    if (!(runtime_context == rhs.runtime_context))
      return false;
    return true;
  }
  bool operator != (const Job &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Job & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Result__isset {
  _Result__isset() : status(false), message(false), progress(false) {}
  bool status;
  bool message;
  bool progress;
} _Result__isset;

class Result {
 public:

  static const char* ascii_fingerprint; // = "6A3D2373194374708487046795BFE36B";
  static const uint8_t binary_fingerprint[16]; // = {0x6A,0x3D,0x23,0x73,0x19,0x43,0x74,0x70,0x84,0x87,0x04,0x67,0x95,0xBF,0xE3,0x6B};

  Result() : status(0), message(""), progress(0) {
  }

  virtual ~Result() throw() {}

  int32_t status;
  std::string message;
  double progress;

  _Result__isset __isset;

  void __set_status(const int32_t val) {
    status = val;
  }

  void __set_message(const std::string& val) {
    message = val;
  }

  void __set_progress(const double val) {
    progress = val;
  }

  bool operator == (const Result & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(message == rhs.message))
      return false;
    if (!(progress == rhs.progress))
      return false;
    return true;
  }
  bool operator != (const Result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _JobFlow__isset {
  _JobFlow__isset() : jobs(false), job_count(false) {}
  bool jobs;
  bool job_count;
} _JobFlow__isset;

class JobFlow {
 public:

  static const char* ascii_fingerprint; // = "29A35DA8F9E878DC321A37C03C070FBC";
  static const uint8_t binary_fingerprint[16]; // = {0x29,0xA3,0x5D,0xA8,0xF9,0xE8,0x78,0xDC,0x32,0x1A,0x37,0xC0,0x3C,0x07,0x0F,0xBC};

  JobFlow() : job_count(0) {
  }

  virtual ~JobFlow() throw() {}

  std::vector<Job>  jobs;
  int32_t job_count;

  _JobFlow__isset __isset;

  void __set_jobs(const std::vector<Job> & val) {
    jobs = val;
  }

  void __set_job_count(const int32_t val) {
    job_count = val;
  }

  bool operator == (const JobFlow & rhs) const
  {
    if (!(jobs == rhs.jobs))
      return false;
    if (!(job_count == rhs.job_count))
      return false;
    return true;
  }
  bool operator != (const JobFlow &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const JobFlow & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HpgcJobException__isset {
  _HpgcJobException__isset() : app_id(false), name(false), message(false) {}
  bool app_id;
  bool name;
  bool message;
} _HpgcJobException__isset;

class HpgcJobException : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "3368C2F81F2FEF71F11EDACDB2A3ECEF";
  static const uint8_t binary_fingerprint[16]; // = {0x33,0x68,0xC2,0xF8,0x1F,0x2F,0xEF,0x71,0xF1,0x1E,0xDA,0xCD,0xB2,0xA3,0xEC,0xEF};

  HpgcJobException() : app_id(0), name(""), message("") {
  }

  virtual ~HpgcJobException() throw() {}

  int32_t app_id;
  std::string name;
  std::string message;

  _HpgcJobException__isset __isset;

  void __set_app_id(const int32_t val) {
    app_id = val;
  }

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_message(const std::string& val) {
    message = val;
  }

  bool operator == (const HpgcJobException & rhs) const
  {
    if (!(app_id == rhs.app_id))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const HpgcJobException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HpgcJobException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

}}} // namespace

#endif
