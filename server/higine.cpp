/*
 * =====================================================================================
 *
 *       Filename:  higine.cpp
 *
 *    Description:  The main engine implementation. This file is created based on the 
 *    				autogenerated skeleton file by thrift, which illustrates how to 
 *    				build a server. 
 *
 *        Version:  1.0
 *        Created:  03/12/2012 11:58:49 AM
 *       Revision:  none
 *       Compiler:  gcc
 *
 *         Author:  LIU Lu (), luliu@nudt.edu.cn
 *   Organization:  
 *
 * =====================================================================================
 */

#include <iostream>

#include "higine.h"
#include "hpgcjobhandler.h"
#include "config.h"
#include "HpgcJob.h"
#include "jobrepoentry.h"

using hpgc::higis::interface::HpgcJobProcessor;

int main() {
	//init_daemon();
	// WARNING: THIS is essential here to realize eagle init in ONLY ONE thread, to
	// avoid thread-safety problem. Maybe I should clear the singleton out and hug
	// the pure DI
	JobRepoEntry::Open(); 
	shared_ptr<HpgcJobHandler> handler(new HpgcJobHandler());
	shared_ptr<TProcessor> processor(new HpgcJobProcessor(handler));
	shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());
	shared_ptr<ThreadManager> threadManager 
		= ThreadManager::newSimpleThreadManager(THREAD_POOL_SIZE);
	shared_ptr<PosixThreadFactory> threadFactory 
		= shared_ptr<PosixThreadFactory>(new PosixThreadFactory());
	threadManager->threadFactory(threadFactory);
	threadManager->start();
	TNonblockingServer server(processor, protocolFactory, PORT, threadManager);
	std::cout << "================================================" << std::endl;
	std::cout << PROJECT_NAME 
		<< " engine v" << VERSION 
		<< " working on port " << PORT << std::endl;
	std::cout << "Press Ctrl+C to exit" << std::endl;
	std::cout << "================================================" << std::endl;
	server.serve();
	return 0;
}
